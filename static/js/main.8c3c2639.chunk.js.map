{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","_ref","name","email","id","react_default","a","createElement","className","src","concat","alt","CardList","robots","map","user","i","components_Card","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8c3c2639.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst Card =  ({name, email, id}) => {\n  return (\n    <div className = 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img src = {`https://robohash.org/${id}?200x200`} alt ='robots'/>\n      <div>\n        <h2>{name}</h2>\n        <p> {email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card","import React from 'react';\nimport Card from \"../components/Card.js\";\n\n\nconst CardList = ({ robots }) => {\n  return (\n      <div>\n      {\n        robots.map( (user, i) => {\n          return (\n            <Card \n              key = {robots[i].id}\n              id = {robots[i].id} \n              name = {robots[i].name} \n              email = {robots[i].email} \n            />\n          );\n        })\n      }\n      </div>     \n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ( {searchChange}) => {\n  return (\n    <div className = 'pa2'>\n      <input\n      className='pa3 ba b--green bg-lightest-blue' \n      type ='search' \n      placeholder ='search robots' \n      onChange = {searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\n const Scroll = (props) => {\n  return (\n    <div style={{overflowY: 'scroll', border: '1px solid black', height: '600px' }}>\n      {props.children};\n    </div>\n  );\n};\n\nexport default Scroll","import React, {Component} from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  // life cycle hook that catches errors\n  componentDidCatch(error, info) {\n    this.setState({hasError: true});\n  }\n\n  render(){\n    if (this.state.hasError){\n      return <h1> Ooops. That is not good</h1>\n    }\n    \n    return this.props.children;\n    }\n\n}\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css';\nimport {setSearchField, requestRobots} from '../actions';\n\n\nconst mapStateToProps = state => {\n  return {\n    // it is now state.searchRobots.searchField because that is the props I am passing in index.js\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\n// the dispatch is what sends the actions object to the reducer\n// we get dispatch from redux\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n\n  componentDidMount(){\n    this.props.onRequestRobots();\n  } \n  \n  render(){\n\n    const {searchField, onSearchChange, robots, isPending} = this.props;\n    // this updates the robot list every time onSearchChange updates the searchfield in state.\n    const filteredRobots = robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    \n    return isPending ? // ternary statement\n      <h1>Loading</h1> :\n      (\n        <div className = 'tc'>\n          <h1 className = 'f2'>RoboFriends</h1>\n          <SearchBox searchChange = {onSearchChange}/>\n          <Scroll>\n            <ErrorBoundary>\n              <CardList robots = {filteredRobots} /> \n            </ErrorBoundary>\n          </Scroll>\n        </div>\n      );\n  }\n};\n\n// tells the component to suscribe to changes in the store\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING, \n  REQUEST_ROBOTS_SUCCESS, \n  REQUEST_ROBOTS_FAILED\n} from './constants.js'\n\n// by setting CHANGE_SEARCH_FIELD to a variable that is equal to the same string, this\n// will prevent errors in typing in the string. IT is a common trick in redux. The\n// variable is set in the constants.js folder.\nexport const setSearchField = (text) => {\n  return {\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n  }\n};\n//redux action. \n\n// returns a function which triggers redux-thunk, which gives it dispatch \nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING});\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n    .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}));\n};","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING, \n  REQUEST_ROBOTS_SUCCESS, \n  REQUEST_ROBOTS_FAILED\n} from './constants.js'\n\nconst initialStateSearch = {\n  searchField: ''\n}\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\n// we want this to be a pure function. This is the reducer\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return {...state, searchField: action.payload}\n    //return Object.assign({}, state, {searchField: action.payload})\n    default:\n      return state;\n  }\n};\n\nexport const requestRobots = (state=initialStateRobots, action={}) =>{\n  switch(action.type){\n    case REQUEST_ROBOTS_PENDING:\n      return {...state, isPending: true};\n    case REQUEST_ROBOTS_SUCCESS:\n      return {...state, robots: action.payload, isPending: false};\n    case REQUEST_ROBOTS_FAILED:\n      return {...state, error: action.payload, isPending: false};\n    default: \n      return state;\n  }\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider, connect} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { robots } from './components/robots';\nimport App from './containers/App';\nimport { searchRobots, requestRobots } from './reducers';\n\n// middleware logger function \nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\n// creates the redux store and connect the middlware to redux\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n                <Provider store={store}>\n                  <App />\n                </Provider>, document.getElementById('root'));\n                \n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}